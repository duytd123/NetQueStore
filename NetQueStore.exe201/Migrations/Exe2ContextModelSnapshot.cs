// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetQueStore.exe201.Models;

#nullable disable

namespace NetQueStore.exe201.Migrations
{
    [DbContext(typeof(Exe2Context))]
    partial class Exe2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<int>("BlogPostId")
                        .HasColumnType("int")
                        .HasColumnName("blog_post_id");

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("blog_category_id");

                    b.HasKey("BlogPostId", "BlogCategoryId")
                        .HasName("PK__blog_pos__C9D2F74A0ED78BD8");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("blog_post_categories", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("activity_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__activity__3213E83FD614E658");

                    b.HasIndex("UserId");

                    b.ToTable("activity_logs", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LogoFilename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("logo_filename");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__banks__3213E83F728AFE73");

                    b.HasIndex(new[] { "Code" }, "UQ__banks__357D4CF9F1E95B74")
                        .IsUnique();

                    b.ToTable("banks", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_number");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<string>("Branch")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("branch");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("is_primary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__bank_acc__3213E83F5CC0B5DA");

                    b.HasIndex("BankId");

                    b.ToTable("bank_accounts", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__blog_cat__3213E83FB9703857");

                    b.HasIndex(new[] { "Slug" }, "UQ__blog_cat__32DD1E4CF375256E")
                        .IsUnique();

                    b.ToTable("blog_categories", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Excerpt")
                        .HasColumnType("text")
                        .HasColumnName("excerpt");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("featured_image");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasColumnName("is_published");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("meta_title");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("published_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__blog_pos__3213E83F89038E53");

                    b.HasIndex("AuthorId");

                    b.HasIndex(new[] { "Slug" }, "UQ__blog_pos__32DD1E4CBC2A3078")
                        .IsUnique();

                    b.ToTable("blog_posts", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__carts__3213E83F959D5878");

                    b.HasIndex("UserId");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__cart_ite__3213E83F0294E126");

                    b.HasIndex("CartId");

                    b.HasIndex("FoodId");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("ImageFilename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_filename");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__categori__3213E83F167E741E");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("max_discount");

                    b.Property<decimal?>("MinPurchase")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("min_purchase");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime")
                        .HasColumnName("starts_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int")
                        .HasColumnName("used_count");

                    b.HasKey("Id")
                        .HasName("PK__coupons__3213E83FE50262EF");

                    b.HasIndex(new[] { "Code" }, "UQ__coupons__357D4CF997A546B8")
                        .IsUnique();

                    b.ToTable("coupons", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.CulturalEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageFilename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_filename");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__cultural__3213E83F16137903");

                    b.HasIndex("ProvinceId");

                    b.ToTable("cultural_events", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.HasKey("Id")
                        .HasName("PK__district__3213E83F13B274AD");

                    b.HasIndex("ProvinceId");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("question");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__faqs__3213E83F9FE3AD34");

                    b.ToTable("faqs", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergens")
                        .HasColumnType("text")
                        .HasColumnName("allergens");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Certification")
                        .HasColumnType("text")
                        .HasColumnName("certification");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CulturalSignificance")
                        .HasColumnType("text")
                        .HasColumnName("cultural_significance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Ingredients")
                        .HasColumnType("text")
                        .HasColumnName("ingredients");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit")
                        .HasColumnName("is_special");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit")
                        .HasColumnName("is_vegetarian");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PreparationMethod")
                        .HasColumnType("text")
                        .HasColumnName("preparation_method");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("sale_price");

                    b.Property<string>("ServingSuggestion")
                        .HasColumnType("text")
                        .HasColumnName("serving_suggestion");

                    b.Property<string>("ShelfLife")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shelf_life");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("slug");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stock_quantity");

                    b.Property<string>("StorageInstructions")
                        .HasColumnType("text")
                        .HasColumnName("storage_instructions");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("PK__foods__3213E83F4D0792E5");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "Slug" }, "UQ__foods__32DD1E4C239DB539")
                        .IsUnique();

                    b.ToTable("foods", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.FoodEvent", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("FoodId", "EventId")
                        .HasName("PK__food_eve__4D7B42AAB31326E4");

                    b.HasIndex("EventId");

                    b.ToTable("food_events", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.FoodImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filename");

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("is_primary");

                    b.HasKey("Id")
                        .HasName("PK__food_ima__3213E83FC4C3D115");

                    b.HasIndex("FoodId");

                    b.ToTable("food_images", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.FoodProducer", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int")
                        .HasColumnName("producer_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("is_primary");

                    b.HasKey("FoodId", "ProducerId")
                        .HasName("PK__food_pro__B1EBBED4BB2AE233");

                    b.HasIndex("ProducerId");

                    b.ToTable("food_producers", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.GiftSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageFilename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_filename");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Occasion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("occasion");

                    b.Property<string>("PackagingType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("packaging_type");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("price");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("sale_price");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__gift_set__3213E83FF942961F");

                    b.HasIndex(new[] { "Slug" }, "UQ__gift_set__32DD1E4CE6DDA26A")
                        .IsUnique();

                    b.ToTable("gift_sets", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.GiftSetItem", b =>
                {
                    b.Property<int>("GiftSetId")
                        .HasColumnType("int")
                        .HasColumnName("gift_set_id");

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.HasKey("GiftSetId", "FoodId")
                        .HasName("PK__gift_set__346B450952D07B4D");

                    b.HasIndex("FoodId");

                    b.ToTable("gift_set_items", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int")
                        .HasColumnName("assigned_to");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit")
                        .HasColumnName("is_resolved");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastname");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("unread")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__messages__3213E83F00FFF349");

                    b.HasIndex("AssignedTo");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.MessageReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reply");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__message___3213E83F71A482A4");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("message_replies", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDelivery")
                        .HasColumnType("datetime")
                        .HasColumnName("actual_delivery");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text")
                        .HasColumnName("admin_notes");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("delivery_address");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("text")
                        .HasColumnName("delivery_notes");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("discount");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasColumnType("datetime")
                        .HasColumnName("estimated_delivery");

                    b.Property<decimal>("GiftWrappingFee")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("gift_wrapping_fee");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("order_number");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("order_status");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("payment_status");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.Property<string>("RecipientEmail")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("recipient_email");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("recipient_name");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("recipient_phone");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("shipping_fee");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shipping_method");

                    b.Property<string>("ShippingProvider")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shipping_provider");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("tax");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tracking_number");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("ward_id");

                    b.HasKey("Id")
                        .HasName("PK__orders__3213E83F66FA6F3E");

                    b.HasIndex("BankId");

                    b.HasIndex("CouponId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WardId");

                    b.HasIndex(new[] { "OrderNumber" }, "UQ__orders__730E34DFC66C0A0B")
                        .IsUnique();

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__order_it__3213E83F858D6C91");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.OrderStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int")
                        .HasColumnName("changed_by");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__order_st__3213E83FEB3FC26E");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("OrderId");

                    b.ToTable("order_status_history", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.PasswordReset", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.HasKey("Email")
                        .HasName("PK__password__AB6E6165E86D432F");

                    b.ToTable("password_resets", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__payment___3213E83F7BFB1929");

                    b.HasIndex(new[] { "Code" }, "UQ__payment___357D4CF96AAFA371")
                        .IsUnique();

                    b.ToTable("payment_methods", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int")
                        .HasColumnName("established_year");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit")
                        .HasColumnName("featured");

                    b.Property<string>("ImageFilename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_filename");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("PK__producer__3213E83FB2DC83A1");

                    b.HasIndex("ProvinceId");

                    b.HasIndex(new[] { "Slug" }, "UQ__producer__32DD1E4C46CDC3F3")
                        .IsUnique();

                    b.ToTable("producers", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__province__3213E83F80D41B17");

                    b.HasIndex("RegionId");

                    b.ToTable("provinces", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageFilename")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_filename");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__regions__3213E83FBA92FACE");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsVerifiedPurchase")
                        .HasColumnType("bit")
                        .HasColumnName("is_verified_purchase");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__reviews__3213E83F4C635CE3");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_public");

                    b.Property<string>("SettingGroup")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("general")
                        .HasColumnName("setting_group");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("setting_key");

                    b.Property<string>("SettingValue")
                        .HasColumnType("text")
                        .HasColumnName("setting_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__settings__3213E83F4B26399D");

                    b.HasIndex(new[] { "SettingKey" }, "UQ__settings__0DFAC4272EB17829")
                        .IsUnique();

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address_detail");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("is_default");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("recipient_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("ward_id");

                    b.HasKey("Id")
                        .HasName("PK__shipping__3213E83F3D6C9CEC");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WardId");

                    b.ToTable("shipping_addresses", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.ShippingFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("fee");

                    b.Property<decimal?>("FreeShippingMin")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("free_shipping_min");

                    b.Property<decimal?>("MinOrderValue")
                        .HasColumnType("decimal(16, 2)")
                        .HasColumnName("min_order_value");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__shipping__3213E83F25692D7F");

                    b.HasIndex("ProvinceId");

                    b.ToTable("shipping_fees", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("verification_token");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F2694C156");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E61644254E430")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("district_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__wards__3213E83F40B5ACA6");

                    b.HasIndex("DistrictId");

                    b.ToTable("wards", (string)null);
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("food_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__wishlist__3213E83F54D768DB");

                    b.HasIndex("FoodId");

                    b.HasIndex(new[] { "UserId", "FoodId" }, "UQ_wishlist_user_food")
                        .IsUnique();

                    b.ToTable("wishlists", (string)null);
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.BlogCategory", null)
                        .WithMany()
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__blog_post__blog___6EC0713C");

                    b.HasOne("NetQueStore.exe201.Models.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__blog_post__blog___6DCC4D03");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.ActivityLog", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__activity___user___7D0E9093");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.BankAccount", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__bank_acco__bank___3B40CD36");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.BlogPost", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.User", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__blog_post__autho__671F4F74");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Cart", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__carts__user_id__7B5B524B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.CartItem", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__cart_item__cart___00200768");

                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("CartItems")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK__cart_item__food___01142BA1");

                    b.Navigation("Cart");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.CulturalEvent", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("CulturalEvents")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK__cultural___provi__73BA3083");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.District", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__districts__provi__1BC821DD");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Food", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__foods__category___5441852A");

                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("Foods")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__foods__province___5629CD9C");

                    b.HasOne("NetQueStore.exe201.Models.Region", "Region")
                        .WithMany("Foods")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK__foods__region_id__5535A963");

                    b.Navigation("Category");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.FoodEvent", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.CulturalEvent", "Event")
                        .WithMany("FoodEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__food_even__event__778AC167");

                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("FoodEvents")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__food_even__food___76969D2E");

                    b.Navigation("Event");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.FoodImage", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("FoodImages")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__food_imag__food___5BE2A6F2");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.FoodProducer", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("FoodProducers")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__food_prod__food___6E01572D");

                    b.HasOne("NetQueStore.exe201.Models.Producer", "Producer")
                        .WithMany("FoodProducers")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__food_prod__produ__6EF57B66");

                    b.Navigation("Food");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.GiftSetItem", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("GiftSetItems")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK__gift_set___food___114A936A");

                    b.HasOne("NetQueStore.exe201.Models.GiftSet", "GiftSet")
                        .WithMany("GiftSetItems")
                        .HasForeignKey("GiftSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__gift_set___gift___10566F31");

                    b.Navigation("Food");

                    b.Navigation("GiftSet");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Message", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.User", "AssignedToNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK__messages__assign__5CA1C101");

                    b.Navigation("AssignedToNavigation");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.MessageReply", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Message", "Message")
                        .WithMany("MessageReplies")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__message_r__messa__607251E5");

                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("MessageReplies")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__message_r__user___6166761E");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Order", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Bank", "Bank")
                        .WithMany("Orders")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK__orders__bank_id__498EEC8D");

                    b.HasOne("NetQueStore.exe201.Models.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK__orders__coupon_i__47A6A41B");

                    b.HasOne("NetQueStore.exe201.Models.District", "District")
                        .WithMany("Orders")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__orders__district__4B7734FF");

                    b.HasOne("NetQueStore.exe201.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__orders__payment___489AC854");

                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("Orders")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__orders__province__4A8310C6");

                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__orders__user_id__46B27FE2");

                    b.HasOne("NetQueStore.exe201.Models.Ward", "Ward")
                        .WithMany("Orders")
                        .HasForeignKey("WardId")
                        .IsRequired()
                        .HasConstraintName("FK__orders__ward_id__4C6B5938");

                    b.Navigation("Bank");

                    b.Navigation("Coupon");

                    b.Navigation("District");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Province");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.OrderItem", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("OrderItems")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK__order_ite__food___51300E55");

                    b.HasOne("NetQueStore.exe201.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_ite__order__503BEA1C");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.OrderStatusHistory", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.User", "ChangedByNavigation")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("ChangedBy")
                        .HasConstraintName("FK__order_sta__chang__55F4C372");

                    b.HasOne("NetQueStore.exe201.Models.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_sta__order__55009F39");

                    b.Navigation("ChangedByNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Producer", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("Producers")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__producers__provi__6A30C649");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Province", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Region", "Region")
                        .WithMany("Provinces")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK__provinces__regio__45F365D3");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Review", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("Reviews")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK__reviews__food_id__628FA481");

                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__reviews__user_id__6383C8BA");

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.ShippingAddress", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.District", "District")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__shipping___distr__2645B050");

                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__shipping___provi__25518C17");

                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__shipping___user___245D67DE");

                    b.HasOne("NetQueStore.exe201.Models.Ward", "Ward")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("WardId")
                        .IsRequired()
                        .HasConstraintName("FK__shipping___ward___2739D489");

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.ShippingFee", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Province", "Province")
                        .WithMany("ShippingFees")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__shipping___provi__2B0A656D");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Ward", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__wards__district___1F98B2C1");

                    b.Navigation("District");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Wishlist", b =>
                {
                    b.HasOne("NetQueStore.exe201.Models.Food", "Food")
                        .WithMany("Wishlists")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK__wishlists__food___06CD04F7");

                    b.HasOne("NetQueStore.exe201.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__wishlists__user___05D8E0BE");

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Bank", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.CulturalEvent", b =>
                {
                    b.Navigation("FoodEvents");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.District", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Food", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("FoodEvents");

                    b.Navigation("FoodImages");

                    b.Navigation("FoodProducers");

                    b.Navigation("GiftSetItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.GiftSet", b =>
                {
                    b.Navigation("GiftSetItems");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Message", b =>
                {
                    b.Navigation("MessageReplies");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Producer", b =>
                {
                    b.Navigation("FoodProducers");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Province", b =>
                {
                    b.Navigation("CulturalEvents");

                    b.Navigation("Districts");

                    b.Navigation("Foods");

                    b.Navigation("Orders");

                    b.Navigation("Producers");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("ShippingFees");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Region", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("BlogPosts");

                    b.Navigation("Carts");

                    b.Navigation("MessageReplies");

                    b.Navigation("Messages");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("NetQueStore.exe201.Models.Ward", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShippingAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
